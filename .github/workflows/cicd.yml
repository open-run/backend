name: CI/CD

on:
  push:
    branches:
    - main

permissions:
    contents: read

env:
  LOCATION: asia-northeast3
  ZONE: asia-northeast3-a
  DOCKER_CONTAINER_PATH: asia-northeast3-docker.pkg.dev/openrun-452712
  DOCKER_REPOSITORY_NAME: openrun-server
  DOCKER_IMAGE_NAME: openrun
  INSTANCE_NAME: openrun-instance

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
          distribution: 'corretto'
          java-version: '17'

    - name: Set up application.yml
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo ${{ secrets.APPLICATION_YML }} | base64 -d > ./application.yml

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean build
      shell: bash

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: "${{ secrets.GCP_DEPLOYMENT_SA_KEY }}"

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: "${{ secrets.GCP_PROJECT_ID }}"

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev

    - name: Create Artifact Registry Repository if it doesn't exist
      run: |
        if ! gcloud artifacts repositories describe ${{ env.DOCKER_REPOSITORY_NAME }} --location=${{ env.LOCATION }}; then
          gcloud artifacts repositories create ${{ env.DOCKER_REPOSITORY_NAME }} --repository-format=docker --location=${{ env.LOCATION }} --description="Docker repository for openrun"
        fi

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ env.DOCKER_CONTAINER_PATH }}/${{ env.DOCKER_REPOSITORY_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Push the Docker image to Google Artifact Registry
      run: docker push ${{ env.DOCKER_CONTAINER_PATH }}/${{ env.DOCKER_REPOSITORY_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo ${{ secrets.GCE_SSH_PRIVATE_KEY }} | base64 -d > ~/.ssh/google_compute_engine
        chmod 600 ~/.ssh/google_compute_engine
        ssh-keygen -y -f ~/.ssh/google_compute_engine > ~/.ssh/google_compute_engine.pub

    - name: Configure GCE instance
      run: |
        MACHINE_TYPE=e2-small

        if gcloud compute instances describe ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }}; then
          echo "Instance already exists, skipping creation."
        else
          echo "Instance does not exist, creating a new one..."
          gcloud compute instances create-with-container ${{ env.INSTANCE_NAME }} \
            --container-image=${{ env.DOCKER_CONTAINER_PATH }}/${{ env.DOCKER_REPOSITORY_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest \
            --zone=${{ env.ZONE }} \
            --machine-type=$MACHINE_TYPE \
            --service-account=${{ secrets.GCP_DEPLOYMENT_SA_PRINCIPAL }} \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --tags=mysql-access
          sleep 5  # Give the instance time to get configured and started.
        fi

    - name: Get the external IP of the GCE and add it to the known_hosts file
      run: |
        EXTERNAL_IP=$(gcloud compute instances describe ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
        ssh-keyscan -H $EXTERNAL_IP >> ~/.ssh/known_hosts

    - name: Run a MySQL container in the GCE
      run: | 
        NETWORK_ID=$(gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker network ls -q -f name=openur-network" | tr -d '\n')
        if [ -z "$NETWORK_ID" ]; then
          echo "Docker network does not exist, creating a new one..."
          gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker network create openur-network"
        fi

        # Check if MySQL container exists
        MYSQL_CONTAINER_ID=$(gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker ps -q -f name=mysql" | tr -d '\n')
        if [ -z "$MYSQL_CONTAINER_ID" ]; then
          echo "MySQL container does not exist, running a new one..."
          gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker run -d \
            --name mysql \
            --network openur-network \
            -p 3306:3306 \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
            -e MYSQL_DATABASE=openur \
            -e MYSQL_USER=openur \
            -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            -v mysql-data:/var/lib/mysql \
            mysql:8.0"
        else
          echo "MySQL container already exists, skipping creation."
        fi

    - name: Run a Redis container in the GCE
      run: |
        # Check if Redis container exists
        REDIS_CONTAINER_ID=$(gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker ps -q -f name=redis" | tr -d '\n')
        if [ -z "$REDIS_CONTAINER_ID" ]; then
          echo "Redis container does not exist, running a new one..."
          gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker run -d \
            --name redis \
            --network openur-network \
            -p 6379:6379 \
            -v redis-data:/data \
            -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            redis:7.2 redis-server --requirepass ${{ secrets.REDIS_PASSWORD }}"
        else
          echo "Redis container already exists, skipping creation."
        fi

    - name: Create firewall rule for MySQL access
      run: |
        if ! gcloud compute firewall-rules describe allow-mysql --format='get(name)'; then
          gcloud compute firewall-rules create allow-mysql \
            --allow tcp:3306 \
            --source-ranges 0.0.0.0/0 \
            --target-tags mysql-access \
            --description "Allow external MySQL access on port 3306"
        else
          echo "Firewall rule already exists, skipping creation."
        fi

    - name: Create firewall rule for Redis access
      run: |
        if ! gcloud compute firewall-rules describe allow-redis --format='get(name)'; then
          gcloud compute firewall-rules create allow-redis \
            --allow tcp:6379 \
            --source-ranges 0.0.0.0/0 \
            --target-tags mysql-access \
            --description "Allow external Redis access on port 6379"
        else
          echo "Firewall rule already exists, skipping creation."
        fi
    
    - name: Pull the latest docker image in GCE and run it
      run: |
        # Authenticate to Google Artifact Registry
        gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="echo ${{ secrets.GCP_DEPLOYMENT_SA_KEY }} | docker login -u _json_key_base64 --password-stdin https://asia-northeast3-docker.pkg.dev"
        
        # Pull the latest docker image
        gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker pull ${{ env.DOCKER_CONTAINER_PATH }}/${{ env.DOCKER_REPOSITORY_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"

        CONTAINER_ID=$(gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker ps -q -f name=openrun" | tr -d '\n')
        if [ -n "$CONTAINER_ID" ]; then
          echo "Openrun container already exists, stopping and removing it..."
          gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker stop $CONTAINER_ID && docker rm $CONTAINER_ID"
        fi
        
        # Run the application container on the same Docker network as MySQL
        gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --command="docker run -d \
          --name openrun \
          --network openur-network \
          -p 80:8080 \
          ${{ env.DOCKER_CONTAINER_PATH }}/${{ env.DOCKER_REPOSITORY_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
